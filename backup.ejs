<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Monopoly Board</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }

        .board-container {
            background: linear-gradient(145deg, #ffffff, #f0f0f0);
            border: 4px solid #2c3e50;
            padding: 25px;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.3);
            max-width: 1400px;
            width: 100%;
        }

        .board-title {
            text-align: center;
            font-size: 32px;
            font-weight: bold;
            margin-bottom: 25px;
            background: linear-gradient(45deg, #e74c3c, #f39c12);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
        }

        .game-container {
            display: flex;
            gap: 20px;
            justify-content: center;
            align-items: flex-start;
        }

        .game-controls {
            width: 280px;
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }

        .game-controls h2 {
            margin-bottom: 15px;
            color: #2c3e50;
            font-size: 18px;
        }

        .game-controls input {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            font-size: 14px;
        }

        .game-controls button {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
            background: #3498db;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
        }

        .game-controls button:hover {
            background: #2980b9;
        }

        .player-info {
            display: flex;
            align-items: center;
            margin-bottom: 10px;
            padding: 10px;
            background: #f8f9fa;
            border-radius: 5px;
            font-size: 12px;
        }

        .player-color {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            margin-right: 10px;
            border: 2px solid #333;
        }

        #current-player {
            margin: 15px 0;
            padding: 10px;
            background: #e8f4fc;
            border-radius: 5px;
            text-align: center;
            font-size: 14px;
        }

        #roll-dice {
            background: #e74c3c;
            font-weight: bold;
            font-size: 16px;
            padding: 15px;
        }

        #roll-dice:hover {
            background: #c0392b;
        }

        #roll-dice:disabled {
            background: #bdc3c7;
            cursor: not-allowed;
        }

        /* Player colors for owned properties */
        .player-1 { 
            background: linear-gradient(135deg, #ff6b6b, #ee5a52) !important; 
            color: white !important; 
        }
        .player-2 { 
            background: linear-gradient(135deg, #48dbfb, #0abde3) !important; 
            color: white !important; 
        }
        .player-3 { 
            background: linear-gradient(135deg, #1dd1a1, #10ac84) !important; 
            color: white !important; 
        }
        .player-4 { 
            background: linear-gradient(135deg, #feca57, #ff9f43) !important; 
            color: white !important; 
        }

        /* Owned property price styling */
        .owned-property .price {
            background: rgba(255,255,255,0.9) !important;
            color: #2c3e50 !important;
        }

        /* House indicators */
        .house-indicator {
            position: absolute;
            bottom: 2px;
            right: 2px;
            display: flex;
            gap: 1px;
        }

        .house {
            width: 5px;
            height: 5px;
            background-color: #2ecc71;
            border-radius: 2px;
            border: 1px solid #27ae60;
        }

        /* Owner badge */
        .owner-badge {
            position: absolute;
            top: 2px;
            right: 2px;
            width: 8px;
            height: 8px;
            border-radius: 50%;
            border: 1px solid white;
        }

        /* Center area with dice and leaderboard */
        .center {
            grid-column: 2 / 10;
            grid-row: 2 / 10;
            background: radial-gradient(circle, #dee4e7, #7abae4);
            border: none;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            border-radius: 8px;
            box-shadow: inset 0 4px 8px rgba(0,0,0,0.2);
            padding: 20px;
            position: relative;
        }

        .center-title {
            font-size: 28px;
            font-weight: bold;
            margin-bottom: 10px;
            color: #2c3e50;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .dice-container {
            display: flex;
            gap: 10px;
            margin: 15px 0;
            align-items: center;
            justify-content: center;
        }

        .dice {
            width: 50px;
            height: 50px;
            background: white;
            border: 2px solid #2c3e50;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
            transition: transform 0.3s ease;
        }

        .dice.rolling {
            animation: rollDice 1s ease-in-out;
        }

        @keyframes rollDice {
            0%, 100% { transform: rotate(0deg) scale(1); }
            25% { transform: rotate(90deg) scale(1.1); }
            50% { transform: rotate(180deg) scale(1.2); }
            75% { transform: rotate(270deg) scale(1.1); }
        }

        .leaderboard {
            background: rgba(255,255,255,0.9);
            padding: 15px;
            border-radius: 8px;
            margin-top: 10px;
            min-width: 200px;
        }

        .leaderboard h3 {
            text-align: center;
            margin-bottom: 10px;
            color: #2c3e50;
            font-size: 14px;
        }

        .player-valuation {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            padding: 3px 5px;
            background: #f8f9fa;
            border-radius: 3px;
            font-size: 12px;
        }

        /* Message display */
        .game-message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: linear-gradient(145deg, #ffffff, #f0f0f0);
            padding: 30px 40px;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.5);
            z-index: 1000;
            text-align: center;
            min-width: 300px;
            max-width: 500px;
            border: 3px solid #2c3e50;
        }

        .game-message h2 {
            color: #2c3e50;
            margin-bottom: 15px;
            font-size: 24px;
        }

        .game-message p {
            color: #34495e;
            margin-bottom: 20px;
            font-size: 16px;
            line-height: 1.4;
        }

        .message-buttons {
            display: flex;
            gap: 10px;
            justify-content: center;
        }

        .message-buttons button {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
        }

        .btn-primary {
            background: #3498db;
            color: white;
        }

        .btn-primary:hover {
            background: #2980b9;
        }

        .btn-secondary {
            background: #95a5a6;
            color: white;
        }

        .btn-secondary:hover {
            background: #7f8c8d;
        }

        .btn-success {
            background: #27ae60;
            color: white;
        }

        .btn-success:hover {
            background: #229954;
        }

        .overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }

        .monopoly-board {
            width: 700px;
            height: 700px;
            display: grid;
            grid-template-columns: repeat(10, 1fr);
            grid-template-rows: repeat(10, 1fr);
            border: 3px solid #2c3e50;
            background-color: #ecf0f1;
            border-radius: 10px;
            overflow: hidden;
        }

        .property {
            border: 1.5px solid #34495e;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            align-items: center;
            text-align: center;
            font-size: 9px;
            font-weight: 600;
            padding: 4px 2px;
            position: relative;
            transition: all 0.3s ease;
            background: linear-gradient(145deg, #ffffff, #f8f9fa);
        }

        .property:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            z-index: 10;
        }

        .property-name {
            font-size: 12px;
            line-height: 1.1;
            margin-bottom: 2px;
            text-shadow: 1px 1px 2px rgba(255,255,255,0.8);
        }

        .corner {
            font-size: 11px;
            font-weight: bold;
            background-color: #000000;
        }

        .corner .property-name {
            font-size: 10px;
        }

        .u{
            background: linear-gradient(135deg, #ffffff, #aba8a8);
            color: rgb(1, 1, 1);
        }
        /* Property colors with gradients */
        .purple { 
            background: linear-gradient(135deg, #9b59b6, #8e44ad);
            color: white;
        }
        #b{
            background: linear-gradient(135deg, #000000, #000000);
            color: white;
        }
        .brown { 
            background: linear-gradient(135deg, #d2691e, #8b4513);
            color: white;
        }
        .light-blue { 
            background: linear-gradient(135deg, #58bfe8, #65cddf);
            color: #2c3e50;
        }
        .pink { 
            background: linear-gradient(135deg, #ff69b4, #e91e63);
            color: white;
        }
        .orange { 
            background: linear-gradient(179deg, #ED8936 0%, #F56565 51%, #ECC94B 100%);
        }
        .red { 
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
        }
        .yellow { 
            background: linear-gradient(135deg, #f1c40f, #f39c12);
            color: #2c3e50;
        }
        .green { 
            background: linear-gradient(135deg, #187d42, #27ae60);
            color: white;
        }
        .dark-blue { 
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
        }
        .light-green{
            background: linear-gradient(135deg, #12ab52, #4ee48d);
            color: white;
        }
        .dg{
            background: linear-gradient(135deg, #0c5202, #036b2e);
            color: white;
        }
        .o{
            background: linear-gradient(135deg, #d76e23, #d29420);
            color: white;
        }
        .railroad { 
            background: linear-gradient(135deg, #000000, #000000);
            color: white;
        }
        .utility { 
            background: linear-gradient(135deg, #040404, #7f8c8d);
            color: white;
        }
        .jail { 
            background: linear-gradient(135deg, #e67e22, #d35400);
            color: white;
        }
        .go-to-jail { 
            background: linear-gradient(135deg, #34495e, #2c3e50);
            color: white;
        }
        .free-parking { 
            background: linear-gradient(135deg, #16a085, #1abc9c);
            color: white;
        }
        .go { 
            background: linear-gradient(135deg, #e74c3c, #c0392b);
            color: white;
        }

        .price {
            font-size: 10px;
            font-weight: bold;
            margin-top: auto;
            padding: 2px 4px;
            background: rgba(255,255,255,0.9);
            color: #2c3e50;
            border-radius: 8px;
            min-height: 14px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 1px 3px rgba(0,0,0,0.2);
        }

        /* Player positions */
        .player-pieces {
            position: absolute;
            bottom: 15px;
            left: 2px;
            display: flex;
            gap: 1px;
            flex-wrap: wrap;
        }

        .player-piece {
            width: 13px;
            height: 13px;
            border-radius: 50%;
            border: 1px solid white;
        }

        /* Responsive adjustments for different sections */
        .top-row { writing-mode: horizontal-tb; }
        .bottom-row { writing-mode: horizontal-tb; }
        .left-column { 
            writing-mode: horizontal-tb;
            text-orientation: mixed;
        }
        .right-column { 
            writing-mode: horizontal-tb;
            text-orientation: mixed;
        }

        /* Grid positions */
        .top-1 { grid-column: 9; grid-row: 1; }
        .top-2 { grid-column: 8; grid-row: 1; }
        .top-3 { grid-column: 7; grid-row: 1; }
        .top-4 { grid-column: 6; grid-row: 1; }
        .top-5 { grid-column: 5; grid-row: 1; }
        .top-6 { grid-column: 4; grid-row: 1; }
        .top-7 { grid-column: 3; grid-row: 1; }
        .top-8 { grid-column: 2; grid-row: 1; }

        .right-1 { grid-column: 10; grid-row: 2; }
        .right-2 { grid-column: 10; grid-row: 3; }
        .right-3 { grid-column: 10; grid-row: 4; }
        .right-4 { grid-column: 10; grid-row: 5; }
        .right-5 { grid-column: 10; grid-row: 6; }
        .right-6 { grid-column: 10; grid-row: 7; }
        .right-7 { grid-column: 10; grid-row: 8; }
        .right-8 { grid-column: 10; grid-row: 9; }

        .bottom-1 { grid-column: 2; grid-row: 10; }
        .bottom-2 { grid-column: 3; grid-row: 10; }
        .bottom-3 { grid-column: 4; grid-row: 10; }
        .bottom-4 { grid-column: 5; grid-row: 10; }
        .bottom-5 { grid-column: 6; grid-row: 10; }
        .bottom-6 { grid-column: 7; grid-row: 10; }
        .bottom-7 { grid-column: 8; grid-row: 10; }
        .bottom-8 { grid-column: 9; grid-row: 10; }

        .left-1 { grid-column: 1; grid-row: 9; }
        .left-2 { grid-column: 1; grid-row: 8; }
        .left-3 { grid-column: 1; grid-row: 7; }
        .left-4 { grid-column: 1; grid-row: 6; }
        .left-5 { grid-column: 1; grid-row: 5; }
        .left-6 { grid-column: 1; grid-row: 4; }
        .left-7 { grid-column: 1; grid-row: 3; }
        .left-8 { grid-column: 1; grid-row: 2; }

        .free-parking-corner { grid-column: 1; grid-row: 1; }
        .jail-corner { grid-column: 10; grid-row: 1; }
        .go-to-jail-corner { grid-column: 10; grid-row: 10; }
        .go-corner { grid-column: 1; grid-row: 10; }
        .ani1{
            position: relative;
            top:20%;
            font-size:larger;
        }
        .abcd{
            font-size: 15px;
        }
    </style>
</head>
<body>

    <div class="board-container">
        <h1 class="board-title">MONOPOLY BOARD</h1>
        
        <div class="game-container">
            <div class="game-controls">
                <div id="player-setup">
                    <input type="text" id="player-name" placeholder="Enter your name">
                    <button onclick="joinGame()">Join Game</button>
                    <button onclick="startGame()">Start Game</button>
                </div>
                
                <div id="game-info">
                    <h2>Players</h2>
                    <div id="players-list"></div>
                    
                    <div id="current-player"></div>
                    
                    <div id="game-controls">
                        <button id="roll-dice" onclick="rollDice()">Roll Dice</button>
                    </div>
                </div>
            </div>
            
            <div class="monopoly-board">
                <!-- Center area -->
                <div class="center">
                    <div class="center-title">MONOPOLY</div>
                    
                    <div class="dice-container">
                        <div class="dice" id="dice1">?</div>
                        <div class="dice" id="dice2">?</div>
                    </div>
                    
                    <div class="leaderboard">
                        <h3>Player Valuations</h3>
                        <div id="leaderboard-content"></div>
                    </div>
                </div>

                <!-- Corners -->
                <div id="b" class="property corner go go-corner">
                    <div class="property-name ani1"><section class="abcd">START</section></div>
                    <div class="player-pieces" data-position="0"></div>
                </div>
                <div id="b" class="property corner jail jail-corner">
                    <div class="property-name ani1"><section class="abcd">JAIL</section></div>
                    <div class="player-pieces" data-position="18"></div>
                </div>
                <div id="b" class="property corner go-to-jail go-to-jail-corner">
                    <div class="property-name ani1"><section class="abcd">IOT</section></div>
                    <div class="player-pieces" data-position="27"></div>
                </div>
                <div id="b" class="property corner free-parking free-parking-corner">
                    <div class="property-name ani1"><section class="abcd">ADMIN</section></div>
                    <div class="player-pieces" data-position="35"></div>
                </div>

                <!-- Top row -->
                <div class="property dg top-1" data-position="17">
                    <div class="property-name">Gazebo</div>
                    <div class="price">$220</div>
                    <div class="player-pieces" data-position="17"></div>
                </div>
                
                <div class="property dg top-2" data-position="16">
                    <div class="property-name">North<br>Square</div>
                    <div class="price">$220</div>
                    <div class="player-pieces" data-position="16"></div>
                </div>
                
                <div class="property dg top-3" data-position="15">
                    <div class="property-name">VMart</div>
                    <div class="price">$220</div>
                    <div class="player-pieces" data-position="15"></div>
                </div>
                
                <div class="property u top-4" data-position="14">
                    <div class="property-name">Water<br>Pump</div>
                    <div class="price">$200</div>
                    <div class="player-pieces" data-position="14"></div>
                </div>
                
                <div class="property dark-blue top-5" data-position="13">
                    <div class="property-name">Dominos</div>
                    <div class="price">$200</div>
                    <div class="player-pieces" data-position="13"></div>
                </div>
                
                <div class="property dark-blue top-6" data-position="12">
                    <div class="property-name">Gym<br>Khana</div>
                    <div class="price">$200</div>
                    <div class="player-pieces" data-position="12"></div>
                </div>
                
                <div class="property o top-7" data-position="11">
                    <div class="property-name">Hunger</div>
                    <div class="price">$170</div>
                    <div class="player-pieces" data-position="11"></div>
                </div>
                
                <div class="property o top-8" data-position="10">
                    <div class="property-name">Aavin</div>
                    <div class="price">$170</div>
                    <div class="player-pieces" data-position="10"></div>
                </div>

                <!-- CHANCE (separate, not a corner) -->
                <div class="property" data-position="9">
                    <div class="property-name">CHANCE</div>
                    <div class="player-pieces" data-position="9"></div>
                </div>

                <!-- Right column -->
                <div class="property brown right-1 right-column" data-position="19">
                    <div class="property-name">Chota<br>Dhobi</div>
                    <div class="price">$250</div>
                    <div class="player-pieces" data-position="19"></div>
                </div>
                
                <div class="property brown right-2 right-column" data-position="20">
                    <div class="property-name">Mess</div>
                    <div class="price">$250</div>
                    <div class="player-pieces" data-position="20"></div>
                </div>
                
                <div class="property yellow right-3 right-column" data-position="21">
                    <div class="property-name">A Block</div>
                    <div class="price">$270</div>
                    <div class="player-pieces" data-position="21"></div>
                </div>
                
                <div class="property yellow right-4 right-column" data-position="22">
                    <div class="property-name">D1 Block</div>
                    <div class="price">$270</div>
                    <div class="player-pieces" data-position="22"></div>
                </div>
                
                <div class="property yellow right-5 right-column" data-position="23">
                    <div class="property-name">D2 Block</div>
                    <div class="price">$270</div>
                    <div class="player-pieces" data-position="23"></div>
                </div>
                
                <div class="property u right-6 right-column" data-position="24">
                    <div class="property-name">Health<br>Center</div>
                    <div class="price">$200</div>
                    <div class="player-pieces" data-position="24"></div>
                </div>
                
                <div class="property pink right-7 right-column" data-position="25">
                    <div class="property-name">B Block</div>
                    <div class="price">$300</div>
                    <div class="player-pieces" data-position="25"></div>
                </div>
                
                <div class="property pink right-8 right-column" data-position="26">
                    <div class="property-name">C Block</div>
                    <div class="price">$300</div>
                    <div class="player-pieces" data-position="26"></div>
                </div>

                <!-- Bottom row -->
                <div class="property orange bottom-1" data-position="35">
                    <div class="property-name">ADMIN<br>BLOCK</div>
                    <div class="price">$700</div>
                    <div class="player-pieces" data-position="35"></div>
                </div>
                
                <div class="property purple bottom-2" data-position="34">
                    <div class="property-name">MG<br>Auditorium</div>
                    <div class="price">$450</div>
                    <div class="player-pieces" data-position="34"></div>
                </div>
                
                <div class="property purple bottom-3" data-position="33">
                    <div class="property-name">Guest<br>House</div>
                    <div class="price">$400</div>
                    <div class="player-pieces" data-position="33"></div>
                </div>
                
                <div class="property u bottom-4" data-position="32">
                    <div class="property-name">Library</div>
                    <div class="price">$200</div>
                    <div class="player-pieces" data-position="32"></div>
                </div>
                
                <div class="property red bottom-5" data-position="31">
                    <div class="property-name">AB-4</div>
                    <div class="price">$350</div>
                    <div class="player-pieces" data-position="31"></div>
                </div>
                
                <div class="property red bottom-6" data-position="30">
                    <div class="property-name">AB-3</div>
                    <div class="price">$350</div>
                    <div class="player-pieces" data-position="30"></div>
                </div>
                
                <div class="property red bottom-7" data-position="29">
                    <div class="property-name">AB-2</div>
                    <div class="price">$350</div>
                    <div class="player-pieces" data-position="29"></div>
                </div>
                
                <div class="property red bottom-8" data-position="28">
                    <div class="property-name">AB-1</div>
                    <div class="price">$350</div>
                    <div class="player-pieces" data-position="28"></div>
                </div>

                <!-- Left column -->
                <div class="property light-blue left-1 left-column" data-position="1">
                    <div class="property-name">Alpha<br>Block</div>
                    <div class="price">$100</div>
                    <div class="player-pieces" data-position="1"></div>
                </div>
                
                <div class="property light-blue left-2 left-column" data-position="2">
                    <div class="property-name">Delta<br>Block</div>
                    <div class="price">$100</div>
                    <div class="player-pieces" data-position="2"></div>
                </div>
                
                <div class="property light-blue left-3 left-column" data-position="3">
                    <div class="property-name">Sigma<br>Block</div>
                    <div class="price">$100</div>
                    <div class="player-pieces" data-position="3"></div>
                </div>
                
                <div class="property u left-4 left-column" data-position="4">
                    <div class="property-name">Electricity</div>
                    <div class="price">$200</div>
                    <div class="player-pieces" data-position="4"></div>
                </div>
                
                <div class="property u left-5 left-column" data-position="5">
                    <div class="property-name">Transport</div>
                    <div class="price">$200</div>
                    <div class="player-pieces" data-position="5"></div>
                </div>
                
                <div class="property light-green left-6 left-column" data-position="6">
                    <div class="property-name">Sports</div>
                    <div class="price">$150</div>
                    <div class="player-pieces" data-position="6"></div>
                </div>
                
                <div class="property light-green left-7 left-column" data-position="7">
                    <div class="property-name">Parking</div>
                    <div class="price">$150</div>
                    <div class="player-pieces" data-position="7"></div>
                </div>
                
                <div class="property light-green left-8 left-column" data-position="8">
                    <div class="property-name">Courier<br>Point</div>
                    <div class="price">$150</div>
                    <div class="player-pieces" data-position="8"></div>
                </div>
            </div>
            
            <div class="game-controls">
                <h2>Game Log</h2>
                <div id="game-log" style="height: 200px; overflow-y: auto; background: #f8f9fa; padding: 10px; border-radius: 5px; font-size: 12px; margin-bottom: 15px;">
                    <p>Welcome to Monopoly! Join the game to start playing.</p>
                </div>
                
                <div id="property-actions" style="display: none;">
                    <button id="upgrade-btn" onclick="upgradeProperty()" class="btn-success" style="width: 100%; margin-bottom: 10px;">Upgrade Property</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Message Overlay -->
    <div id="message-overlay" class="overlay" style="display: none;"></div>
    <div id="game-message" class="game-message" style="display: none;">
        <h2 id="message-title"></h2>
        <p id="message-text"></p>
        <div class="message-buttons" id="message-buttons"></div>
    </div>


<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    let currentPlayerId = null;
    let gameState = {};
    let isRolling = false;
    
    const playerColors = ['#ff6b6b', '#48dbfb', '#1dd1a1', '#feca57'];
    
    // --- SOCKET LISTENERS ---
    socket.on('connect', () => {
        currentPlayerId = socket.id;
    });
    
    socket.on('game-state', (state) => {
        gameState = state;
        updateUI();
    });
    
    socket.on('player-joined', (player) => {
        addToLog(`${player.name} joined the game!`);
        updateUI();
    });
    
    socket.on('game-started', () => {
        addToLog('Game started! Roll the dice to begin.');
        updateUI();
    });
    
    socket.on('turn-changed', (player) => {
        addToLog(`It's now ${player.name}'s turn.`);
        const idx = gameState.players.findIndex(p => p.id === player.id);
    if (idx !== -1) {
        gameState.currentPlayerIndex = idx;
    }
        updateUI();
    });
    
    socket.on('dice-rolled', (data) => {
        showDiceRoll(data.roll.die1, data.roll.die2);
        
        let message = `${data.player.name} rolled ${data.roll.die1} and ${data.roll.die2} (${data.roll.total})`;
        addToLog(message);
        
        if (data.moveResult && data.moveResult.passedStart) {
            addToLog(`${data.player.name} passed START and collected $200!`);
        }
        
        setTimeout(() => {
            updatePlayerPositions();
            handlePositionResult(data);
        }, 1500);
    });
    
    socket.on('property-bought', (data) => {
        const property = gameState.board[data.propertyIndex];
        addToLog(`${data.player.name} bought ${property.name} for ${property.price}`);
        updateUI();
    });
    
    socket.on('rent-paid', (data) => {
        const property = gameState.board[data.propertyIndex];
        const owner = gameState.players.find(p => p.id === property.owner);
        addToLog(`${data.player.name} paid ${data.amount} rent to ${owner.name} for ${property.name}`);
         hideMessage();
        updateUI();
    });
    
    socket.on('property-upgraded', (data) => {
        const property = gameState.board[data.propertyIndex];
        addToLog(`${data.player.name} upgraded ${property.name} (${property.houses} houses)`);
        updateUI();
    });
    
    socket.on('player-left', () => {
        addToLog('A player left the game.');
        updateUI();
    });
    
    socket.on('game-over', (data) => {
        showMessage('Game Over!', `${data.winner.name} wins with a valuation of ${calculatePlayerValuation(data.winner)}!`, [
            { text: 'New Game', action: () => location.reload(), class: 'btn-primary' }
        ]);
    });
    
    // --- GAME FUNCTIONS ---
    function joinGame() {
        const playerName = document.getElementById('player-name').value.trim();
        if (playerName) {
            socket.emit('join-game', playerName);
            document.getElementById('player-name').value = '';
        }
    }
    
    function startGame() {
        socket.emit('start-game');
    }
    
    function rollDice() {
        if (isRolling || !canRoll()) return;
        
        isRolling = true;
        document.getElementById('roll-dice').disabled = true;
        
        const dice1 = document.getElementById('dice1');
        const dice2 = document.getElementById('dice2');
        
        dice1.classList.add('rolling');
        dice2.classList.add('rolling');
        
        dice1.textContent = '?';
        dice2.textContent = '?';
        
        socket.emit('roll-dice'); // server will auto pass turn after handling
        
        setTimeout(() => {
            dice1.classList.remove('rolling');
            dice2.classList.remove('rolling');
            isRolling = false;
            updateRollButton();
        }, 1000);
    }
    
    function showDiceRoll(die1, die2) {
        setTimeout(() => {
            document.getElementById('dice1').textContent = die1;
            document.getElementById('dice2').textContent = die2;
        }, 1000);
    }
    
    function canRoll() {
        if (!gameState.gameStarted) return false;
        if (!gameState.players || gameState.players.length === 0) return false;
        
        const currentPlayer = gameState.players[gameState.currentPlayerIndex];
        return currentPlayer && currentPlayer.id === currentPlayerId;
    }
    
    function handlePositionResult(data) {
        const { positionResult } = data;
        const currentPlayer = gameState.players[gameState.currentPlayerIndex];

        switch (positionResult.action) {
            case 'buy':
                if (currentPlayer.id === currentPlayerId) {
                    showMessage(
                        'Property Available!',
                        `You landed on ${positionResult.property.name}. Buy it for ${positionResult.property.price}?`,
                        [
                            { text: 'Buy', action: () => socket.emit('buy-property', positionResult.property.position), class: 'btn-success' },
                            { text: 'Pass', action: () => socket.emit('pass-turn'), class: 'btn-secondary' }
                        ]
                    );
                } else {
                    addToLog(`${currentPlayer.name} may buy ${positionResult.property.name}`);
                }
                break;
                
            case 'payRent':
                if (currentPlayer.id === currentPlayerId) {
                    const owner = gameState.players.find(p => p.id === positionResult.owner);
                    showMessage(
                        'Pay Rent!',
                        `You need to pay ${positionResult.amount} rent to ${owner.name} for ${positionResult.property.name}`,
                        [
                            { text: 'Pay', action: () => socket.emit('pay-rent', positionResult.property.position), class: 'btn-primary' }
                        ]
                    );
                } else {
                    addToLog(`${currentPlayer.name} must pay rent on ${positionResult.property.name}`);
                }
                break;
                
            case 'upgrade':
                if (currentPlayer.id === currentPlayerId) {
                    showMessage(
                        'Upgrade Available!',
                        `You own ${positionResult.property.name}. Upgrade for ${Math.floor(positionResult.property.price * 0.5)}?`,
                        [
                            { text: 'Upgrade', action: () => socket.emit('upgrade-property', positionResult.property.position), class: 'btn-success' },
                            { text: 'Pass', action: () => socket.emit('pass-turn'), class: 'btn-secondary' }
                        ]
                    );
                }
                break;
                
            case 'chance':
                showMessage('Chance Card!', positionResult.card.description, [
                    { text: 'OK', action: () => hideMessage(), class: 'btn-primary' }
                ]);
                break;
                
            case 'iot':
                showMessage('IOT Protection!', 'You got IOT protection for the next 3 properties you land on!', [
                    { text: 'OK', action: () => hideMessage(), class: 'btn-primary' }
                ]);
                break;
                
            case 'jail-visit':
                showMessage('Just Visiting Jail', 'You are only visiting jail.', [
                    { text: 'OK', action: () => hideMessage(), class: 'btn-primary' }
                ]);
                break;
                
            case 'jail-sent':
                showMessage('Go To Jail!', 'You were sent to jail for 3 turns.', [
                    { text: 'OK', action: () => hideMessage(), class: 'btn-primary' }
                ]);
                break;
        }
    }
    
    function showMessage(title, text, buttons) {
        document.getElementById('message-title').textContent = title;
        document.getElementById('message-text').textContent = text;
        
        const buttonsContainer = document.getElementById('message-buttons');
        buttonsContainer.innerHTML = '';
        
        buttons.forEach(button => {
            const btn = document.createElement('button');
            btn.textContent = button.text;
            btn.className = button.class;
            btn.onclick = () => {
                button.action();
                hideMessage();
            };
            buttonsContainer.appendChild(btn);
        });
        
        document.getElementById('message-overlay').style.display = 'block';
        document.getElementById('game-message').style.display = 'block';
    }
    
    function hideMessage() {
        document.getElementById('message-overlay').style.display = 'none';
        document.getElementById('game-message').style.display = 'none';
    }
    
    // --- UI HELPERS ---
    function updateUI() {
        updatePlayersList();
        updateCurrentPlayer();
        updateLeaderboard();
        updatePropertyOwnership();
        updatePlayerPositions();
        updateRollButton();
    }
    
    function updatePlayersList() {
        const playersList = document.getElementById('players-list');
        playersList.innerHTML = '';
        
        if (gameState.players && gameState.players.length > 0) {
            gameState.players.forEach((player, index) => {
                const playerInfo = document.createElement('div');
                playerInfo.className = 'player-info';
                
                const statusText = player.inJail ? ' (JAIL)' : (player.iotTurns > 0 ? ` (IOT:${player.iotTurns})` : '');
                
                playerInfo.innerHTML = `
                    <span class="player-color" style="background-color: ${playerColors[index]}"></span>
                    <span>${player.name}: ${player.money}${statusText}</span>
                `;
                playersList.appendChild(playerInfo);
            });
        } else {
            playersList.innerHTML = '<p>No players joined yet</p>';
        }
    }
    
    function updateCurrentPlayer() {
        const currentPlayerDiv = document.getElementById('current-player');
        if (gameState.players && gameState.players[gameState.currentPlayerIndex]) {
            const player = gameState.players[gameState.currentPlayerIndex];
            const isMyTurn = player.id === currentPlayerId;
            currentPlayerDiv.innerHTML = `<h3>Current Player: ${player.name} ${isMyTurn ? '(YOU)' : ''}</h3>`;
            updateRollButton();
        } else {
            currentPlayerDiv.innerHTML = '';
        }
    }
    
    function updateLeaderboard() {
        const leaderboardContent = document.getElementById('leaderboard-content');
        leaderboardContent.innerHTML = '';
        
        if (gameState.players && gameState.players.length > 0) {
            const playersWithValuation = gameState.players.map((player, index) => ({
                ...player,
                valuation: calculatePlayerValuation(player),
                colorIndex: index
            })).sort((a, b) => b.valuation - a.valuation);
            
            playersWithValuation.forEach(player => {
                const div = document.createElement('div');
                div.className = 'player-valuation';
                div.innerHTML = `
                    <span style="color: ${playerColors[player.colorIndex]}">●</span>
                    <span>${player.name}</span>
                    <span>${player.valuation}</span>
                `;
                leaderboardContent.appendChild(div);
            });
        }
    }
    
    function calculatePlayerValuation(player) {
        let valuation = player.money;
        if (gameState.board && player.properties) {
            player.properties.forEach(propIndex => {
                const property = gameState.board[propIndex];
                if (property) {
                    valuation += property.price;
                    if (property.houses) {
                        valuation += property.houses * Math.floor(property.price * 0.5);
                    }
                }
            });
        }
        return valuation;
    }
    
    function updatePropertyOwnership() {
        if (!gameState.board) return;
        
        gameState.board.forEach((property, index) => {
            const propertyElement = document.querySelector(`[data-position="${index}"]`);
            if (!propertyElement) return;
            
            propertyElement.classList.remove('player-1', 'player-2', 'player-3', 'player-4', 'owned-property');
            
            const existingBadge = propertyElement.querySelector('.owner-badge');
            const existingHouses = propertyElement.querySelector('.house-indicator');
            if (existingBadge) existingBadge.remove();
            if (existingHouses) existingHouses.remove();
            
            if (property.owner) {
                const playerIndex = gameState.players.findIndex(p => p.id === property.owner);
                if (playerIndex !== -1) {
                    propertyElement.classList.add(`player-${playerIndex + 1}`, 'owned-property');
                    
                    const ownerBadge = document.createElement('div');
                    ownerBadge.className = 'owner-badge';
                    ownerBadge.style.backgroundColor = playerColors[playerIndex];
                    propertyElement.appendChild(ownerBadge);
                    
                    if (property.houses > 0) {
                        const houseIndicator = document.createElement('div');
                        houseIndicator.className = 'house-indicator';
                        
                        for (let i = 0; i < Math.min(property.houses, 4); i++) {
                            const house = document.createElement('div');
                            house.className = 'house';
                            houseIndicator.appendChild(house);
                        }
                        
                        propertyElement.appendChild(houseIndicator);
                    }
                }
            }
        });
    }
    
    function updatePlayerPositions() {
        document.querySelectorAll('.player-pieces').forEach(container => {
            container.innerHTML = '';
        });
        
        if (gameState.players) {
            gameState.players.forEach((player, index) => {
                const positionContainer = document.querySelector(`[data-position="${player.position}"] .player-pieces`);
                if (positionContainer) {
                    const piece = document.createElement('div');
                    piece.className = 'player-piece';
                    piece.style.backgroundColor = playerColors[index];
                    positionContainer.appendChild(piece);
                }
            });
        }
    }
    
    function updateRollButton() {
        const rollButton = document.getElementById('roll-dice');
        const canPlayerRoll = canRoll();
        
        rollButton.disabled = !canPlayerRoll || isRolling;
        
        if (isRolling) {
            rollButton.textContent = 'Rolling...';
        } else if (!gameState.gameStarted) {
            rollButton.textContent = 'Game Not Started';
        } else if (!canPlayerRoll) {
            rollButton.textContent = 'Not Your Turn';
        } else {
            rollButton.textContent = 'Roll Dice';
        }
    }
    
    function addToLog(message) {
        const gameLog = document.getElementById('game-log');
        const logEntry = document.createElement('p');
        logEntry.textContent = `${new Date().toLocaleTimeString()}: ${message}`;
        logEntry.style.marginBottom = '5px';
        gameLog.appendChild(logEntry);
        gameLog.scrollTop = gameLog.scrollHeight;
        
        while (gameLog.children.length > 20) {
            gameLog.removeChild(gameLog.firstChild);
        }
    }
    
    // allow pressing Enter to join
    document.getElementById('player-name').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            joinGame();
        }
    });
    
    updateUI();
</script>


</body>
</html>